//
// UT DS Global Mixins
//

// ----------
// Block Modifier @access public
// @param {String} $modifer - Modifier's name
// stylelint-disable at-rule-no-unknown
// stylelint-disable plugin/no-browser-hacks
// stylelint-disable length-zero-no-unit
@mixin mod($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// ----------
// Image Fluidity Include @access public
@mixin img-fluid {
  max-width: 100%;
  height: auto;
}

// ----------
// List Style Stripper @access public
@mixin list-style-none {
  list-style: none;
  padding-left: 0;
}

.ut-list-unstyled {
  @include list-style-none();
}

// ----------
//  Caret icon appender @access public
// @mixin link-caret {
//   &:after {
//     font-family: "ut-icons";
//     content: "\f105";
//     position: absolute;
//     padding-left: 5px;
//   }
// }

// ----------
// Focus on elements appearance
@mixin focus-default {
  outline: 2px dotted #aeb0b5;
  outline-offset: 3px;
}

*:focus,
.ut-focus {
  @include focus-default;
}

// ----------
// Clearfix @access public
@mixin clearfix {
  display: block;
  clear: both;
  content: "";
}

// ----------
// Strip unit of measure
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// ----------
// Convert the value to rem
@function convert-to-rem($value, $base-value: $ut-rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// ----------
// rem-calc function to convert pixel values to rem values
@function rem-calc($values, $base-value: $ut-rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
// stylelint-enable
