<?php

/**
 * @file
 * The primary PHP file for the EVPP Theme theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\evpp_utdk3_theme\FortyAcresRenderCallback;

/**
 * Implements hook_preprocess_page().
 */
function evpp_utdk3_theme_preprocess_page(&$variables) {
  // UT logo in brandbar.
  $theme_handler = \Drupal::service('theme_handler');
  $theme_path = $theme_handler->getTheme('evpp_utdk3_theme')->getPath();
  $variables['brandbar_shield'] = '/' . $theme_path . '/images/utexas-brandbar-shield.svg';
  // Year for use in footer copyright.
  $variables['year'] = date('Y');
  // Parent entity link and title.
  $variables['parent_entity_title'] = theme_get_setting('parent_link_title');
  $variables['parent_entity_link'] = theme_get_setting('parent_link');
  // Add css if user selects a logo option in theme settings.
  $variables['logo_height'] = theme_get_setting('logo_height');
}

/**
 * Implements hook_form_FORMTPYE_alter().
 */
function evpp_utdk3_theme_form_search_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['keys']['#attributes']['placeholder'] = 'Search the site...';
  $form['actions']['#attributes']['id'] = 'edit-search-actions';
}

/**
 * Implements hook_form_FORMTPYE_alter().
 */
function evpp_utdk3_theme_form_user_login_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#attributes']['class'][] = 'ut-btn';
}

/**
 * Implements hook_preprocess_field().
 */
function evpp_utdk3_theme_preprocess_field(&$variables, $hook) {
  switch ($variables['element']['#bundle']) {
    case 'feed_block':
      if ($variables['element']['#field_name'] == 'field_read_more') {
        // Add 'button' class to Read more <a> tag.
        $variables['attributes']['class'][] = 'ut-cta';
        $variables['items'][0]['content']['#options']['attributes']['class'][] = 'ut-btn--secondary';
      }
      if ($variables['element']['#field_name'] == 'field_intro_text') {
        $variables['attributes']['class'][] = 'ut-copy';
      }
      break;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function evpp_utdk3_theme_preprocess_block(&$variables) {
  if (isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  }
  // Style block title like the headline by using its dedicated class.
  $variables['title_attributes']['class'][] = 'ut-headline';
}

/**
 * Implements hook_preprocess_layout().
 */
function evpp_utdk3_theme_preprocess_layout(&$variables) {
  // If a class of "container-fluid" has NOT been applied to this layout,
  // (i.e., via Layout Builder Styles) add "container".
  $add_container = TRUE;
  if (isset($variables['attributes']['class']) && in_array('container-fluid', $variables['attributes']['class'])) {
    $add_container = FALSE;
  }
  if ($add_container) {
    $variables['attributes']['class'][] = 'container';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function evpp_utdk3_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    if ($node instanceof NodeInterface) {
      array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
    }
    else {
      $node_revision = \Drupal::entityTypeManager()->getStorage('node')->load($node);
      if ($node_revision instanceof NodeInterface) {
        array_splice($suggestions, 1, 0, 'page__node__' . $node_revision->getType());
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function evpp_utdk3_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  $theme_name = \Drupal::service('theme.manager')->getActiveTheme()->getName();
  $theme_key = strtolower($theme_name) . '-';
  // Remove the block, the themename (if present), and replace dashes with
  // underscores in the block ID to use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace([$theme_key, 'block-', '-'], ['', '', '_'], $variables['attributes']['block']);
    if ($block = Block::load($hook)) {
      $region = $block->getRegion();
      $suggestions[] = 'menu__' . $region;
    }
  }
}

/**
 * Implements template_preprocess_menu().
 */
function evpp_utdk3_theme_preprocess_menu(&$variables) {
  // Call this potentially self-invoking process function separately.
  _evpp_utdk3_theme_preprocess_menu_items_create_attribute($variables['items']);

  if ($variables['menu_name'] != 'main') {
    return;
  }

  // Call this potentially self-invoking process function separately.
  _evpp_utdk3_theme_preprocess_menu_items_nolink($variables['items']);
}

/**
 * Helper function to recursively create menu item link attributes object.
 */
function _evpp_utdk3_theme_preprocess_menu_items_create_attribute(&$items) {
  // Items are referred to using index throughout foreach to help recursively
  // pass their data by reference.
  foreach ($items as $delta => $unused) {
    // Create new attributes object for use in the template.
    $items[$delta]['link_attributes'] = new Attribute();

    // When the menu item has children, recursively call this function.
    if (!empty($items[$delta]['below'])) {
      _evpp_utdk3_theme_preprocess_menu_items_create_attribute($items[$delta]['below']);
    }
  }
}

/**
 * Helper function to recursively set menu item link attributes.
 */
function _evpp_utdk3_theme_preprocess_menu_items_nolink(&$items) {
  // Items are referred to using index throughout foreach to help recursively
  // pass their data by reference.
  foreach ($items as $delta => $unused) {
    /** @var \Drupal\Core\Template\Attribute $link_attributes */
    $link_attributes = $items[$delta]['link_attributes'];
    /** @var \Drupal\Core\Url $itemUrl */
    $item_url = $items[$delta]['url'];

    // If the url is routed (not external), check for <nolink> and <none> so
    // that a tabindex can be applied for accessiblity.
    if ($item_url->isRouted() && $menuEntityRouteName = $item_url->getRouteName()) {
      if ($menuEntityRouteName == '<nolink>' || $menuEntityRouteName == '<none>') {
        $link_attributes->setAttribute('tabindex', 0);
      }
    }

    // Reassign link attributes after processing.
    $items[$delta]['link_attributes'] = $link_attributes;

    // When the menu item has children, recursively call this function.
    if (!empty($items[$delta]['below'])) {
      _evpp_utdk3_theme_preprocess_menu_items_nolink($items[$delta]['below']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function evpp_utdk3_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  $base_plugin_id = $variables['elements']['#base_plugin_id'];
  if (isset($base_plugin_id) && $base_plugin_id === 'system_menu_block') {
    if (isset($variables['elements']['#id'])) {
      $hook = $variables['elements']['#id'];
      $block = Block::load($hook);
      $region = $block->getRegion();
      $suggestions[] = 'block__system_menu_block__' . $region;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function evpp_utdk3_theme_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#value']) && isset($variables['element']['#type'])) {
    if ($variables['element']['#value'] instanceof TranslatableMarkup) {
      if ($variables['element']['#type'] == 'submit' && $variables['element']['#value']->render() == 'Search') {
        $suggestions[] = 'input__submit__search';
      }
    }
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function evpp_utdk3_theme_preprocess_breadcrumb(&$variables) {
  // Use a placeholder to inject dynamic content.
  $placeholder_title = [
    '#lazy_builder' => [
      FortyAcresRenderCallback::class . '::lazyBuilder',
      ['page_title'],
    ],
    '#create_placeholder' => TRUE,
  ];
  $variables['breadcrumb'][] = [
    'text' => $placeholder_title,
  ];
}

/**
 * Implements hook_preprocess_block_system_messages_block().
 */
function evpp_utdk3_theme_preprocess_block__system_messages_block(&$variables) {
  $variables['content']['#include_fallback'] = FALSE;
}

/**
 * Implements hook_preprocess_menu().
 */
function evpp_utdk3_theme_preprocess_menu_local_action(&$variables) {
  if (isset($variables['link'])) {
    $variables['link']['#options']['attributes']['class'][] = 'ut-admin-button';
  }
}
